"use client";
import { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';


const mockData = [
    [
        100, 97.06187870554531,
        94.0221021776547, 100.87260047047675,
        101.87200219928948, 106.92164436932272,
        106.07877916722252, 107.95540983332373,
        109.3814031192906, 109.14893506603424,
        109.51726027904068, 106.45111783209018,
        110.03265099816267, 111.3748851910392,
        111.92090288453466, 109.1206694884468,
        109.73073854219709, 112.09670122800614,
        110.32556801205995, 114.70888252864299,
        120.80720139032447
    ],
    [
        100, 96.86820761309153,
        97.82793556403146, 97.05675622829838,
        98.33878816123217, 98.67063432239141,
        101.99039419471585, 102.49040422571495,
        103.06340496166706, 101.43499825677361,
        106.82763176054303, 104.5183554402972,
        102.22359700322559, 100.19525708263988,
        101.4204769720072, 102.58969173806192,
        103.30117695536062, 98.0749263476118,
        95.37684048564373, 93.00477281583707,
        89.73280005908697
    ],
    [
        100, 107.28605097541644,
        106.44031314963462, 106.21409578836247,
        109.78765438048976, 107.04079433602098,
        105.34954468966272, 108.8070482380909,
        106.41812917305795, 108.63335427751402,
        109.88572190286426, 111.58118373872439,
        108.5115345886443, 108.70785465665371,
        106.03998440022688, 101.11621747211339,
        109.39390540122909, 113.99029376719834,
        119.2427214777269, 116.95284177965256,
        106.5365451289808
    ],
    [
        100, 100.99075638394514,
        102.32475289945619, 105.76745508693004,
        106.35877707519269, 112.01317560166308,
        109.55386423293486, 110.89352418614531,
        111.6625985620977, 108.5907096531712,
        104.77041277093598, 109.1769161785296,
        118.11447796418804, 119.66352199022225,
        116.2097099512098, 105.85959964930757,
        104.01294632135978, 101.21640107856071,
        92.55276734375923, 85.07981523234314,
        79.61825616365743
    ],
    [
        100, 104.95684983215973,
        105.31102877167507, 102.67617279622739,
        108.13479140888931, 105.22742413211506,
        106.4405268679968, 102.468443963202,
        98.86353265678912, 94.27299074710054,
        101.37126812099817, 100.96744670983566,
        91.97487448168894, 89.42561247453277,
        87.99093342896697, 89.48135836941488,
        83.73724946477999, 85.23518302761627,
        85.15813301638144, 81.10926632404372,
        78.63156878707204
    ],
    [
        100, 99.21169824213624,
        102.54966213535776, 100.92937259157756,
        98.71341226262686, 99.85141893219682,
        97.10446095066813, 94.72135713581612,
        102.47554191640128, 107.19739461302116,
        97.64995783870059, 89.70542263594126,
        82.027072907421, 82.62071891912545,
        86.16129929093896, 86.08341209878938,
        85.22943838556779, 84.88521581443491,
        88.38940662972212, 95.57875153923742,
        96.85614945684235
    ],
    [
        100, 101.76909150051858,
        102.26801659045182, 105.62438639056633,
        106.91599542253081, 102.9261692711287,
        100.40019112103381, 95.91922973989955,
        93.15074202586138, 87.56240766185896,
        86.15762050999534, 83.1500100312993,
        86.71327233746601, 87.87535568938745,
        85.18780443497904, 86.83363588689008,
        87.19501418536497, 84.05616624644605,
        86.74609269989246, 89.61826274535848,
        84.70228506354391
    ],
    [
        100, 101.32090952011437,
        101.88737187491691, 99.65037814060034,
        100.34147848161986, 96.81139530391027,
        104.73667710679254, 101.71369407653242,
        99.93936343210775, 91.3850379350674,
        85.51872544586585, 82.75109825850406,
        81.93018211531165, 81.48304534747322,
        81.82215592347833, 82.91569868175226,
        83.47040593510883, 83.46779752567996,
        84.35343933788886, 86.7247985509469,
        89.98378508371077
    ],
    [
        100, 99.78747022196926,
        98.21082344191917, 100.25520331693131,
        97.49713704319882, 92.97004113994797,
        97.25390079320698, 91.41940818460196,
        83.5943495940583, 80.54341025492585,
        80.47060146347849, 80.97631623526198,
        84.31914173066636, 85.6354415140283,
        88.37590720224172, 83.23677966036624,
        84.11997023884244, 84.78704202392822,
        84.35149639922194, 83.49270635738043,
        86.59006560079851
    ],
    [
        100, 100.33745195295182,
        105.67173611900108, 106.88996105654574,
        103.1294976958144, 110.89462505916944,
        101.01789787576642, 99.39724069155378,
        93.01659799952638, 92.93251382599246,
        90.09364385407913, 91.71099329877083,
        92.93669911700633, 98.7053757738645,
        93.29092776388487, 94.14785207302587,
        97.68578571047779, 97.68273307737198,
        101.30650489433134, 102.7190253739633,
        93.37095876455737
    ]
];
let nrep = 10;
let nsteps = 20
let data: any[] = [];

let minValue = mockData[0][0];
let maxValue = mockData[0][0];
let floorValue = 0;
for (let i = 0; i < nsteps + 1; i++) {
    let stepName = `S${i}`;
    let colData = {
        name: stepName
    };
    for (let j = 0; j < nrep; j++) {
        floorValue = parseFloat(mockData[j][i].toFixed(3));
        colData[`p${j}`] = floorValue;
        if (floorValue < minValue) minValue = floorValue;
        if (floorValue > maxValue) maxValue = floorValue;
    }

    data.push(colData);
}

console.log(data);

export const Multiline = () => {
    return (<ResponsiveContainer style={{display: "block"}}>
        <LineChart
            data={data}
            margin={{
                top: 5,
                right: 30,
                left: 20,
                bottom: 5,
            }}
        >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis domain={[minValue, maxValue]} />
            <Tooltip />
            <Legend />
            {
                mockData.map((m, index) => {
                    let random1 = Math.floor(Math.random() * 255);
                    let random2 = Math.floor(Math.random() * 255);
                    let random3 = Math.floor(Math.random() * 255);
                    return <Line key={`path-${index}`} type="monotone" dataKey={`p${index}`} stroke={`rgb(${random1}, ${random2}, ${random3}, 0.8)`} activeDot={{ r: 8 }} />
                })
            }
        </LineChart>
    </ResponsiveContainer>)
}
