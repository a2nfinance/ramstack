import { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Rectangle } from 'recharts';

let x: number[] = [
    0.7133498878774648,   4.605170185988092,   4.605170185988092,
    1.3862943611198906,  0.2107210313156526,  0.2107210313156526,
     4.605170185988092,  1.3862943611198906,  1.3862943611198906,
    1.3862943611198906,  0.2107210313156526,  3.2188758248682006,
    1.0216512475319814,  1.3862943611198906, 0.44628710262841953,
     2.407945608651872,  1.3862943611198906,  1.8325814637483102,
     2.407945608651872,  1.8325814637483102,                   0,
    3.2188758248682006, 0.44628710262841953,  0.2107210313156526,
    0.2107210313156526,  1.0216512475319814, 0.44628710262841953,
     2.407945608651872, 0.44628710262841953, 0.44628710262841953,
    1.8325814637483102,  1.3862943611198906, 0.44628710262841953,
    1.3862943611198906,  3.2188758248682006,  0.7133498878774648,
    1.3862943611198906,                   0,   4.605170185988092,
    3.2188758248682006,  1.8325814637483102,   2.407945608651872,
    0.2107210313156526,  0.2107210313156526,  1.3862943611198906,
    0.2107210313156526,  0.7133498878774648,  1.0216512475319814,
   0.44628710262841953,                   0,  1.0216512475319814,
   0.44628710262841953,  0.7133498878774648,   2.407945608651872,
    0.7133498878774648,  0.2107210313156526,  3.2188758248682006,
     4.605170185988092,  0.2107210313156526,  1.0216512475319814,
    0.7133498878774648,  0.2107210313156526,                   0,
    1.8325814637483102,  1.0216512475319814, 0.44628710262841953,
    1.8325814637483102,                   0,  1.3862943611198906,
                     0,   2.407945608651872,  0.7133498878774648,
     4.605170185988092,   4.605170185988092,  1.0216512475319814,
     4.605170185988092,                   0,  1.3862943611198906,
    3.2188758248682006,   2.407945608651872,  1.0216512475319814,
    0.2107210313156526,  1.0216512475319814,                   0,
    0.7133498878774648,  0.2107210313156526,  1.8325814637483102,
    3.2188758248682006,  1.0216512475319814,  1.0216512475319814,
    3.2188758248682006,   4.605170185988092,  1.3862943611198906,
    0.7133498878774648,  0.7133498878774648,                   0,
     2.407945608651872,   2.407945608651872,  1.3862943611198906,
    1.8325814637483102
 ];


let min = Math.min(...x);
let max = Math.max(...x);
let range = 1;
let steps = Math.floor((max - min) / range) + 1;
let data: {point: string, count: number}[] = [];

for (let j=0; j < steps; j++) {
    let point = min + range*j;
    point += range / 2
    data.push(
        {
            point: point.toFixed(2),
            count: 0
        }
    )
}

for (let i = 0; i < x.length; i++) {
    for(let j = 0; j < steps; j++) {
        if (x[i] >= (min + j*range) && x[i] < (min + (j+1) * range)) {
            data[j].count += 1;
        }
    }
}


export const Exponential = () => {
    let random1 = Math.floor(Math.random() * 255);
    let random2 = Math.floor(Math.random() * 255);
    let random3 = Math.floor(Math.random() * 255);
    let random_rgb = `rgb(${random1}, ${random2}, ${random3}, 0.8)`;
    return (
        <ResponsiveContainer>
             <BarChart
          data={data}
          margin={{
            top: 5,
            right: 30,
            left: 20,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="point" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="count" fill={random_rgb} activeBar={<Rectangle fill="pink" stroke="blue" />} />
        </BarChart>
        </ResponsiveContainer>
    );

}